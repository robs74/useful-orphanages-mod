include("include/SOVIETInstructions.txt");
include("include/helper_functions.txt");
include("settings.txt");

defineVariable(int, n);
defineVariable(int, i);
defineVariable(int, j);
defineVariable(int, k);
defineVariable(Building, building);
defineVariable(Person, person);
defineVariable(Resources, resources);
defineVariable(int, orphanages_capacity);
defineVariable(int, orphans);
defineVariable(int, age);
defineVariable(float, min_loyalty);
defineVariable(vec3, vector);
defineVariable(int, rnd);

defineFunction(main, void)
{
	InitConstants();
	InitSettings();
	//check correctness of the constants in the settings file
	ORPHANAGE_MAX_AGE = Clamp(ORPHANAGE_MAX_AGE, 0.0, 21.0);
	ORPHANAGE_OVERCROWDING_FACTOR = MaxFloat(ORPHANAGE_OVERCROWDING_FACTOR, 0.1);
	ORPHANAGE_MIN_HAPPINESS = Clamp(ORPHANAGE_MIN_HAPPINESS, 0.0, 1.0);
	ORPHANAGE_MAX_CRIME = Clamp(ORPHANAGE_MAX_CRIME, 0.0, 1.0);
	EVENT_HAPPINESS_PENALTY = Clamp(EVENT_HAPPINESS_PENALTY, 0.0, 1.0);
	EVENT_LOYALTY_PENALTY= Clamp(EVENT_LOYALTY_PENALTY, 0.0, 1.0);
	while(1 ? 1)
	{
		Script_EnterCriticalSection();
		Building_GetNumberOfBuildings(n);
		orphanages_capacity = 0;
		orphans = 0;
 		for (i=0, i<n, i=i+1)
		{
			building.GetDataByIndex(i);
  			if(building.nType ? BUILDINGTYPE_ORPHANAGE)
			{
				resources.GetFromBuilding(i);
				orphanages_capacity = orphanages_capacity + building.fCurrentProduction;
				orphans = orphans + building.nWorkersSecondaryNum;
				min_loyalty = 1.0;
				for(j=0, j<building.nWorkersNum, j=j+1)
				{
					Building_Workers_GetID(i, j, k);
					person.GetDataByIndex(k);
					if(person.fStatusSoviet < min_loyalty)
					{	
						min_loyalty = person.fStatusSoviet;
					}
				}
				for(j=0, j<building.nWorkersSecondaryNum, j=j+1)
				{
					Building_WorkersSecondary_GetID(i, j, k);
					person.GetDataByIndex(k);
					age = person.fAge;
					if(ORPHANAGE_AGE_FACTOR > 1 & age % ORPHANAGE_AGE_FACTOR ? 0)
					{	
						Person_SetAge(k, person.fAge + 1.0);
					}
					if(ORPHANAGE_MAX_AGE < 21.0 & person.fAge > ORPHANAGE_MAX_AGE & person.fAge < 21.0)
					{	
						Person_SetAge(k, 21.0);
						orphans = orphans - 1;
					}
					if(building.nWorkersSecondaryNum < ORPHANAGE_OVERCROWDING_FACTOR * building.fCurrentProduction & resources.food > 0.0 & resources.clothes > 0.0 & resources.meat > 0.0)
					{
						if(person.fStatusHappiness < ORPHANAGE_MIN_HAPPINESS)
						{
							Person_SetStatus(k, 0, ORPHANAGE_MIN_HAPPINESS);
						}
						if(person.fStatusSoviet < min_loyalty)
						{
							Person_SetStatus(k, 3, min_loyalty);
						}
						if(person.fStatusCrime > ORPHANAGE_MAX_CRIME)
						{
							Person_SetStatus(k, 10, ORPHANAGE_MAX_CRIME);
						}
					}
				}
			}
		}
		if((orphanages_capacity ? 0 | orphans > orphanages_capacity - 1) & EVENT_PROB > 0)
		{
			Random(rnd);
			rnd = rnd % 10000;
			if(rnd < EVENT_PROB)
			{
				Notification_CreateNewStringPic(
				"Child dies on the street",
				"A child has recently died on the street in one of our cities due to a lack of beds in our orphanages. This has caused a major commotion in our nation.",
				"editor/tool_orphanage.png",
				vector);
				for (i=0, i<n, i=i+1)
				{
					building.GetDataByIndex(i);
					if(building.nType ? BUILDINGTYPE_LIVING)
					{
						for(j=0, j<building.nWorkersNum, j=j+1)
						{
							Building_Workers_GetID(i, j, k);
							person.GetDataByIndex(k);
							Person_SetStatus(k, 0, Clamp(person.fStatusHappiness - EVENT_HAPPINESS_PENALTY, 0.0, 1.0));
							Person_SetStatus(k, 3, Clamp(person.fStatusSoviet - EVENT_LOYALTY_PENALTY, 0.0, 1.0));
						}
					}
				}
			}
		}
		Script_LeaveCriticalSection();
		Script_Sleep(9.5);
	}
	end();
}
